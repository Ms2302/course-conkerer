{"ast":null,"code":"import e from \"axios\";\nimport n from \"js-cookie\";\nconst t = {\n  user: {},\n  tokens: {},\n  mode: \"live\"\n};\n\nfunction r(e) {\n  try {\n    const n = e.split(\".\")[1].replace(/-/g, \"+\").replace(/_/g, \"/\"),\n          t = decodeURIComponent(window.atob(n).split(\"\").map(e => \"%\" + (\"00\" + e.charCodeAt(0).toString(16)).slice(-2)).join(\"\"));\n    return JSON.parse(t);\n  } catch (e) {\n    console.error(\"Problem decoding JWT payload\", e);\n  }\n}\n\nfunction o(e) {\n  try {\n    if (!e) return !1;\n    const n = r(e);\n    return new Date(1e3 * n.exp) > new Date();\n  } catch (e) {\n    return !1;\n  }\n}\n\nfunction a(e) {\n  var n, t;\n\n  if (e) {\n    if (\"string\" == typeof e) throw new Error(e);\n    if (null != e && null != (n = e.response) && null != (t = n.data) && t.message) throw new Error(e.response.data.message);\n    throw e;\n  }\n}\n\nfunction i() {\n  return \"undefined\" != typeof window;\n}\n\nconst s = t.user;\n\nfunction c(e) {\n  return e.replace(/([^:]\\/)\\/+/g, \"$1\");\n}\n\nconst u = function (n, r, o) {\n  try {\n    const a = c(`${t.baseUrl}${n}`);\n    return Promise.resolve(e.put(a, r, o));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      d = function (n, r, o) {\n  try {\n    const a = c(`${t.baseUrl}${n}`);\n    return Promise.resolve(e.post(a, r, o));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      h = function (n, r) {\n  try {\n    const o = c(`${t.baseUrl}${n}`);\n    return Promise.resolve(e.get(o, r));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nfunction l(e, r, o) {\n  const a = `${o}.${t.tenantId}`;\n  r = r || {\n    secure: \"live\" === t.mode,\n    sameSite: \"Lax\"\n  }, \"refresh\" === o && (r.sameSite = \"Strict\"), n.set(a, e, r);\n}\n\nfunction f(e) {\n  let t, r;\n\n  try {\n    const e = window.location.pathname,\n          n = window.location.hostname,\n          o = n.split(\".\").slice(-2).join(\".\");\n    t = [void 0, e, \"/\"], r = [void 0, n, `.${n}`, o, `.${o}`];\n  } catch (e) {\n    t = [void 0, \"/\"], r = [void 0];\n  }\n\n  t.map(t => {\n    r.map(r => {\n      const o = {};\n      r && (o.domain = r), t && (o.path = t), n.remove(e, o);\n    });\n  });\n}\n\nfunction m() {\n  f(t.tokens.accessTokenName), f(t.tokens.idTokenName), f(t.tokens.refreshTokenName), t.tokens.accessToken = void 0, t.tokens.idToken = void 0, t.tokens.refreshToken = void 0, function () {\n    for (const e in t.user) \"function\" != typeof t.user[e] && delete t.user[e];\n  }();\n}\n\nfunction p() {\n  return !!$.firstFactorToken;\n}\n\nfunction k() {\n  return $.firstFactorToken ? {\n    authorization: `Bearer ${$.firstFactorToken}`\n  } : {};\n}\n\nfunction w() {\n  $.secondFactors = [], $.firstFactorToken = null;\n}\n\nconst v = function () {\n  try {\n    return Promise.resolve(P()).then(function (e) {\n      return {\n        isLoggedIn: e,\n        needsSecondFactor: p(),\n        firstFactors: $.firstFactors,\n        secondFactors: $.secondFactors,\n        resetMfaState: w\n      };\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      P = function () {\n  return Promise.resolve(function (e, n) {\n    try {\n      var r = !!_() || !!o(t.tokens.refreshToken) && Promise.resolve(M()).then(function () {\n        return _();\n      });\n    } catch (e) {\n      return !1;\n    }\n\n    return r && r.then ? r.then(void 0, function () {\n      return !1;\n    }) : r;\n  }());\n},\n      R = {\n  codeChallenge: \"\",\n\n  get usePkce() {\n    return !!R.codeChallenge;\n  }\n\n};\n\nfunction g() {\n  i() && (window.localStorage.removeItem(\"uf_pkce_code_challenge\"), window.localStorage.removeItem(\"uf_pkce_code_challenge_expiresAt\"));\n}\n\nfunction y() {\n  if (!i()) return;\n  const e = I(\"code_challenge\");\n  if (e) return R.codeChallenge = e, function (e) {\n    if (!i()) return;\n    if (!e) return g();\n    R.codeChallenge = e;\n    const n = Date.now() + 3e5;\n\n    try {\n      window.localStorage.setItem(\"uf_pkce_code_challenge\", e), window.localStorage.setItem(\"uf_pkce_code_challenge_expiresAt\", n);\n    } catch (e) {}\n  }(e), !0;\n\n  const n = function () {\n    if (!i()) return;\n    const e = window.localStorage.getItem(\"uf_pkce_code_challenge\");\n\n    if (e) {\n      const n = window.localStorage.getItem(\"uf_pkce_code_challenge_expiresAt\");\n      if (n && parseInt(n, 10) > Date.now()) return e;\n    }\n  }();\n\n  return n ? (R.codeChallenge = n, !0) : (g(), !1);\n}\n\nfunction T() {\n  return R.usePkce ? {\n    code_challenge: R.codeChallenge\n  } : {};\n}\n\nfunction I(e) {\n  if (\"object\" == typeof window && \"object\" == typeof window.location && window.location.href && !(window.location.href.indexOf(`${e}=`) < 0)) return decodeURIComponent(window.location.href.split(`${e}=`)[1].split(\"&\")[0]);\n}\n\nconst U = (e, n) => {\n  !1 !== e && q(!0 !== e ? e || I(\"redirect\") || n.redirectTo || \"/\" : I(\"redirect\") || n.redirectTo || \"/\");\n};\n\nfunction q(e) {\n  if (!e || \"object\" != typeof document || \"object\" != typeof window) return;\n\n  try {\n    document && window;\n  } catch (e) {\n    return;\n  }\n\n  const n = document.createElement(\"a\");\n  n.href = e, n.pathname !== window.location.pathname && window.location.assign(`${n.pathname}${n.hash}${n.search}`);\n}\n\nconst b = function (_ref) {\n  let {\n    data: e,\n    redirect: n,\n    handleUpstreamResponse: t,\n    handleMfaRequired: r,\n    handlePkceRequired: o,\n    handleTokens: a,\n    handleRedirect: i\n  } = _ref;\n\n  try {\n    function s() {\n      let t;\n\n      function s(r) {\n        if (t) return r;\n\n        function s() {\n          let t;\n\n          function r(r) {\n            if (t) return r;\n\n            const o = function () {\n              if (e.hasOwnProperty(\"redirectTo\") && !1 !== n) {\n                const n = function () {\n                  if (\"function\" == typeof i) return Promise.resolve(i(c, e)).then(function () {});\n                  U(c, e);\n                }();\n\n                if (n && n.then) return n.then(function () {});\n              }\n            }();\n\n            return o && o.then ? o.then(function () {\n              return e;\n            }) : e;\n          }\n\n          const a = function () {\n            if (e.hasOwnProperty(\"authorizationCode\")) {\n              if (!c) throw new Error(\"Missing PKCE redirect url\");\n              return \"function\" == typeof o ? Promise.resolve(o(e.authorizationCode, c, e)).then(function () {}) : (function (e, n, t) {\n                if (!n || !e) return;\n                R.usePkce || console.warn(\"Redirecting with a PKCE authorization code, but no PKCE challenge code is present in the client. This is unexpected.\");\n                const r = new URL(n);\n                r.searchParams.set(\"authorization_code\", e), g(), window.location.assign(r.href);\n              }(e.authorizationCode, c), t = 1, e);\n            }\n          }();\n\n          return a && a.then ? a.then(r) : r(a);\n        }\n\n        const u = function () {\n          if (e.hasOwnProperty(\"tokens\")) {\n            const n = \"function\" == typeof a ? Promise.resolve(a(e.tokens, e)).then(function () {}) : Promise.resolve(C(e.tokens, e)).then(function () {});\n            if (n && n.then) return n.then(function () {});\n          }\n        }();\n\n        return u && u.then ? u.then(s) : s();\n      }\n\n      const u = function () {\n        if (e.hasOwnProperty(\"firstFactorToken\")) {\n          function n() {\n            return t = 1, e;\n          }\n\n          const o = function () {\n            if (\"function\" == typeof r) return Promise.resolve(r(e.firstFactorToken, e)).then(function () {});\n            !function (e, n) {\n              n.isMfaRequired ? ($.firstFactorToken = e, $.secondFactors = n.authentication.secondFactors) : \"OK\" === n.message && w();\n            }(e.firstFactorToken, e);\n          }();\n\n          return o && o.then ? o.then(n) : n();\n        }\n      }();\n\n      return u && u.then ? u.then(s) : s(u);\n    }\n\n    let c = n || I(\"redirect\") || e.redirectTo || \"/\";\n\n    const u = function () {\n      if (\"function\" == typeof t) return Promise.resolve(t(e.upstreamResponse, e)).then(function () {});\n    }();\n\n    return Promise.resolve(u && u.then ? u.then(s) : s());\n  } catch (d) {\n    return Promise.reject(d);\n  }\n},\n      $ = {\n  firstFactors: [],\n  secondFactors: [],\n  firstFactorToken: null\n};\n\nfunction E(e) {\n  l(e.access.value, e.access.cookieOptions, \"access\"), l(e.id.value, e.id.cookieOptions, \"id\"), e.refresh && e.refresh.value && l(e.refresh.value, e.refresh.cookieOptions, \"refresh\"), N();\n}\n\nfunction j(e, n) {\n  try {\n    var t = e();\n  } catch (e) {\n    return n(e);\n  }\n\n  return t && t.then ? t.then(void 0, n) : t;\n}\n\nconst M = function () {\n  try {\n    const e = j(function () {\n      return Promise.resolve(function () {\n        try {\n          const e = n.get(t.tokens.refreshTokenName);\n          return Promise.resolve(j(function () {\n            return Promise.resolve(h(\"/auth/refresh\", {\n              headers: {\n                authorization: `Bearer ${e}`\n              }\n            })).then(function (_ref2) {\n              let {\n                data: e,\n                status: n\n              } = _ref2;\n              if (200 !== n) throw new Error(e.message || \"Problem with request\");\n              if (e.tokens) return E(e.tokens), e;\n              throw new Error(\"Problem setting cookies\");\n            });\n          }, function (e) {\n            a(e);\n          }));\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      }()).then(function () {});\n    }, function (e) {\n      console.warn(`Refresh failed: ${e.message}`);\n    });\n    return Promise.resolve(e && e.then ? e.then(function () {}) : void 0);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      C = function (e, n) {\n  try {\n    return E(e), Promise.resolve(function (_ref3) {\n      let {} = _ref3;\n      return Promise.resolve();\n    }(n)).then(function () {});\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nfunction N() {\n  [\"access\", \"id\", \"refresh\"].map(e => {\n    try {\n      const o = n.get(t.tokens[`${e}TokenName`]);\n      t.tokens[`${e}Token`] = o, \"id\" === e && o && function () {\n        if (!t.tokens.idToken) return console.warn(\"Cannot define user: missing ID token\");\n        t.user = t.user || {};\n        const e = r(t.tokens.idToken),\n              n = [\"email\", \"phoneNumber\", \"username\", \"name\", \"image\", \"data\", \"createdAt\", \"updatedAt\", \"mode\", \"userId\", \"userUuid\", \"tenantId\", \"isEmailConfirmed\", \"isPhoneNumberConfirmed\", \"confirmedEmailAt\", \"confirmedPhoneNumberAt\", \"isMfaRequired\", \"isConfirmed\"];\n\n        for (const r of n) {\n          if (\"update\" === r) return;\n          t.user[r] = e[r];\n        }\n      }();\n    } catch (n) {\n      console.warn(`Problem setting ${e} token.`);\n    }\n  });\n}\n\nfunction _() {\n  return o(t.tokens.accessToken);\n}\n\nt.tokens = t.tokens || {}, t.tokens.refresh = M;\nconst F = t.tokens;\n\nfunction O(e, n) {\n  try {\n    var t = e();\n  } catch (e) {\n    return n(e);\n  }\n\n  return t && t.then ? t.then(void 0, n) : t;\n}\n\nconst S = function (_ref4) {\n  let {\n    password: e,\n    existingPassword: n\n  } = _ref4;\n\n  try {\n    return Promise.resolve(O(function () {\n      if (!t.tokens.accessToken) throw new Error('updatePassword({ method: \"jwt\" }) was called without a JWT access token.');\n      return Promise.resolve(u(\"/auth/basic\", {\n        tenantId: t.tenantId,\n        password: e,\n        existingPassword: n\n      }, {\n        headers: {\n          Authorization: `Bearer ${t.tokens.accessToken}`\n        }\n      })).then(function (_ref5) {\n        let {\n          data: e\n        } = _ref5;\n        return e;\n      });\n    }, function (e) {\n      a(e);\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      z = function (_ref6) {\n  let {\n    uuid: e,\n    token: n,\n    password: r,\n    redirect: o,\n    handleUpstreamResponse: i,\n    handleMfaRequired: s,\n    handlePkceRequired: c,\n    handleTokens: d,\n    handleRedirect: h\n  } = _ref6;\n\n  try {\n    return Promise.resolve(O(function () {\n      if (n = n || I(\"token\"), e = e || I(\"uuid\"), !n || !e) throw new Error(\"Missing token or uuid\");\n      return Promise.resolve(u(\"/auth/reset\", {\n        tenantId: t.tenantId,\n        uuid: e,\n        token: n,\n        password: r\n      })).then(function (_ref7) {\n        let {\n          data: e\n        } = _ref7;\n        return b({\n          data: e,\n          redirect: o,\n          handleUpstreamResponse: i,\n          handleMfaRequired: s,\n          handlePkceRequired: c,\n          handleTokens: d,\n          handleRedirect: h\n        });\n      });\n    }, function (e) {\n      a(e);\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      x = function (_ref8) {\n  let {\n    method: e,\n    password: n,\n    existingPassword: r,\n    uuid: o,\n    token: a,\n    redirect: i,\n    handleUpstreamResponse: s,\n    handleMfaRequired: c,\n    handlePkceRequired: u,\n    handleTokens: d,\n    handleRedirect: h\n  } = _ref8;\n\n  try {\n    switch (e) {\n      case \"link\":\n        return z({\n          uuid: o,\n          token: a,\n          password: n,\n          redirect: i,\n          handleUpstreamResponse: s,\n          handleMfaRequired: c,\n          handlePkceRequired: u,\n          handleTokens: d,\n          handleRedirect: h\n        });\n\n      case \"jwt\":\n        return S({\n          password: n,\n          existingPassword: r\n        });\n\n      default:\n        if (a = a || I(\"token\"), (o = o || I(\"uuid\")) && a) return z({\n          uuid: o,\n          token: a,\n          password: n,\n          redirect: i,\n          handleUpstreamResponse: s,\n          handleMfaRequired: c,\n          handlePkceRequired: u,\n          handleTokens: d,\n          handleRedirect: h\n        });\n        if (t.tokens.accessToken) return S({\n          password: n,\n          existingPassword: r\n        });\n        throw new Error(\"updatePassword() was called without link credentials (token & uuid) or a JWT access token.\");\n    }\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      A = x;\n\nfunction L(_ref9) {\n  let {\n    provider: e,\n    redirect: n\n  } = _ref9;\n  if (!e) throw new Error(\"Missing provider\");\n\n  const r = function (_ref10) {\n    let {\n      provider: e,\n      redirect: n\n    } = _ref10;\n    if (!e) throw new Error(\"Missing provider\");\n    if (!t.tenantId) throw new Error(\"Missing tenantId\");\n    let r = `${t.baseUrl}auth/${e}/login?tenant_id=${t.tenantId}&origin=${window.location.origin}`,\n        o = n || I(\"redirect\");\n    return !1 === n && (o = \"object\" == typeof document && document.location.pathname), o && (r += `&redirect=${encodeURIComponent(o)}`), r;\n  }({\n    provider: e,\n    redirect: n\n  });\n\n  window.location.assign(r);\n}\n\nfunction B(e, n) {\n  try {\n    var t = e();\n  } catch (e) {\n    return n(e);\n  }\n\n  return t && t.then ? t.then(void 0, n) : t;\n}\n\nconst D = function (_ref11) {\n  let {\n    email: e,\n    name: n,\n    username: r,\n    userData: o,\n    options: i\n  } = _ref11;\n\n  try {\n    return Promise.resolve(B(function () {\n      return Promise.resolve(d(\"/auth/link\", {\n        email: e,\n        name: n,\n        username: r,\n        data: o,\n        options: i,\n        tenantId: t.tenantId\n      })).then(function (_ref12) {\n        let {\n          data: e\n        } = _ref12;\n        return e;\n      });\n    }, function (e) {\n      a(e);\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nfunction J(e, n) {\n  try {\n    var t = e();\n  } catch (e) {\n    return n(e);\n  }\n\n  return t && t.then ? t.then(void 0, n) : t;\n}\n\nfunction W(_ref13) {\n  let {\n    channel: e,\n    phoneNumber: n,\n    email: t\n  } = _ref13;\n  if (\"sms\" !== e && \"email\" !== e) throw new Error(\"Invalid channel\");\n\n  if (!p()) {\n    if (\"sms\" === e && !n) throw new Error('SMS verification code requires \"phoneNumber\"');\n    if (\"email\" === e && !t) throw new Error('Email verification code requires \"email\"');\n  }\n}\n\nconst K = function (_ref14) {\n  let {\n    channel: e = \"sms\",\n    phoneNumber: n,\n    email: r,\n    name: o,\n    username: i,\n    data: s\n  } = _ref14;\n\n  try {\n    return Promise.resolve(J(function () {\n      return W({\n        channel: e,\n        phoneNumber: n,\n        email: r\n      }), Promise.resolve(d(\"/auth/code\", {\n        channel: e,\n        email: r,\n        phoneNumber: n,\n        name: o,\n        username: i,\n        data: s,\n        tenantId: t.tenantId\n      }, {\n        headers: k()\n      })).then(function (_ref15) {\n        let {\n          data: e\n        } = _ref15;\n        return e;\n      });\n    }, function (e) {\n      a(e);\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nfunction V(e, n) {\n  try {\n    var t = e();\n  } catch (e) {\n    return n(e);\n  }\n\n  return t && t.then ? t.then(void 0, n) : t;\n}\n\nfunction G(e, n) {\n  try {\n    var t = e();\n  } catch (e) {\n    return n(e);\n  }\n\n  return t && t.then ? t.then(void 0, n) : t;\n}\n\nconst H = /((^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.))\\d{1,3}\\.\\d{1,3}/g,\n      Q = function () {\n  try {\n    return Promise.resolve(function (e, n) {\n      try {\n        var r = Promise.resolve(h(`/tenants/${t.tenantId}/mode`)).then(function (_ref16) {\n          let {\n            data: e\n          } = _ref16;\n          var n;\n          return X.value = e.mode || \"test\", X.reason = Z(X.value), t.mode = X.value, n = e.authentication, t.tenantId ? n && \"object\" == typeof n && Array.isArray(n.firstFactors) ? $.firstFactors = n.firstFactors : console.warn(\"setFirstFactors: invalid factors passed.\") : console.warn(\"setFirstFactors: tried to set factors without a tenantId set.\"), e;\n        });\n      } catch (e) {\n        return n();\n      }\n\n      return r && r.then ? r.then(void 0, n) : r;\n    }(0, function () {\n      X.value = \"test\", t.mode = X.value;\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      X = {\n  value: \"live\",\n  reason: void 0,\n  setMode: Q\n};\n\nfunction Y() {\n  const e = function (e) {\n    try {\n      const e = window.location.hostname;\n      return !(!e.match(/localhost/g) && !e.match(H));\n    } catch (e) {\n      return !0;\n    }\n  }() || !function () {\n    try {\n      return \"https:\" === window.location.protocol;\n    } catch (e) {\n      return !1;\n    }\n  }() ? \"test\" : \"live\";\n  X.value = e, X.reason = Z(e), t.mode = e;\n}\n\nfunction Z(e) {\n  try {\n    return \"live\" === e ? \"domain\" : \"http:\" === window.location.protocol ? \"http\" : \"https:\" !== window.location.protocol ? \"protocol\" : \"domain\";\n  } catch (e) {}\n}\n\nY(), t.user.update = function (e) {\n  try {\n    return !e || Object.keys(e).length < 1 ? Promise.resolve(console.warn(\"Missing user properties to update\")) : Promise.resolve(u(\"/self\", e, {\n      headers: {\n        authorization: `Bearer ${t.tokens.accessToken}`\n      }\n    })).then(function () {\n      return Promise.resolve(M()).then(function () {\n        return t.user;\n      });\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}, t.user.hasRole = function (e) {\n  let {\n    tenantId: n\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  try {\n    if (!t.tokens.accessToken || !t.tenantId) return !1;\n    const {\n      authorization: o\n    } = r(t.tokens.accessToken);\n    return !!o && !(!o[n = n || t.tenantId] || !o[n].roles) && o[n].roles.indexOf(e) > -1;\n  } catch (e) {\n    return !1;\n  }\n}, t.user.updatePassword = x, t.user.getTotp = function () {\n  try {\n    let e;\n    return Promise.resolve(V(function () {\n      function n(n) {\n        if (e) return n;\n        if (!t.tokens.accessToken) throw new Error(\"getTotp() was called without a JWT access token.\");\n        return Promise.resolve(h(\"/auth/totp\", {\n          headers: {\n            Authorization: `Bearer ${t.tokens.accessToken}`\n          }\n        })).then(function (_ref17) {\n          let {\n            data: e\n          } = _ref17;\n          return e;\n        });\n      }\n\n      const r = function () {\n        if (p()) return Promise.resolve(h(\"/auth/totp\", {\n          headers: k()\n        })).then(function (_ref18) {\n          let {\n            data: n\n          } = _ref18;\n          return e = 1, n;\n        });\n      }();\n\n      return r && r.then ? r.then(n) : n(r);\n    }, function (e) {\n      a(e);\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nlet ee = [],\n    ne = !1;\nvar te = {\n  addInitCallback: function (e) {\n    e && \"function\" == typeof e && ee.push(e);\n  },\n  init: function (n) {\n    let r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!n) return console.warn(\"Userfront initialized without tenantId\");\n\n    if (t.tenantId = n, t.baseUrl = r.baseUrl || \"https://api.userfront.com/v0/\", t.baseUrl.endsWith(\"/\") || (t.baseUrl += \"/\"), r.domain) {\n      t.domain = r.domain;\n      const n = `https://${t.domain}`;\n      e.defaults.headers.common[\"x-application-id\"] = n, e.defaults.headers.common[\"x-origin\"] = n;\n    }\n\n    t.tokens = t.tokens || {}, t.tokens.accessTokenName = `access.${t.tenantId}`, t.tokens.idTokenName = `id.${t.tenantId}`, t.tokens.refreshTokenName = `refresh.${t.tenantId}`, N(), Y(), w(), $.firstFactors = [];\n\n    try {\n      ee.length > 0 && ee.forEach(e => {\n        e && \"function\" == typeof e && e({\n          tenantId: n\n        });\n      }), ee = [];\n    } catch (e) {}\n  },\n  registerUrlChangedEventListener: function () {\n    if (!ne) {\n      ne = !0;\n\n      try {\n        history.pushState = (e = history.pushState, function () {\n          var n = e.apply(this, arguments);\n          return window.dispatchEvent(new Event(\"pushstate\")), window.dispatchEvent(new Event(\"urlchanged\")), n;\n        }), history.replaceState = (e => function () {\n          var n = e.apply(this, arguments);\n          return window.dispatchEvent(new Event(\"replacestate\")), window.dispatchEvent(new Event(\"urlchanged\")), n;\n        })(history.replaceState), window.addEventListener(\"popstate\", () => {\n          window.dispatchEvent(new Event(\"urlchanged\"));\n        });\n      } catch (e) {}\n\n      var e;\n    }\n  },\n  logout: function () {\n    let {\n      method: e,\n      redirect: n\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      if (\"saml\" === e) return function () {\n        try {\n          if (!t.tokens.accessToken) throw new Error(\"Please log in to authorize your logout request.\");\n          const e = G(function () {\n            return Promise.resolve(h(\"/auth/saml/idp/token\", {\n              headers: {\n                authorization: `Bearer ${t.tokens.accessToken}`\n              }\n            })).then(function (_ref19) {\n              let {\n                data: e\n              } = _ref19;\n              window.location.assign(`${t.baseUrl}auth/saml/idp/logout?tenant_id=${t.tenantId}&token=${e.token}&uuid=${t.user.userUuid}`);\n            });\n          }, function (e) {\n            a(e);\n          });\n          return Promise.resolve(e && e.then ? e.then(function () {}) : void 0);\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      }();\n      if (!t.tokens.accessToken) return Promise.resolve(m());\n      const r = G(function () {\n        return Promise.resolve(h(\"/auth/logout\", {\n          headers: {\n            authorization: `Bearer ${t.tokens.accessToken}`\n          }\n        })).then(function (_ref20) {\n          let {\n            data: e\n          } = _ref20;\n          m(), U(n, e);\n        });\n      }, function () {\n        m();\n      });\n      return Promise.resolve(r && r.then ? r.then(function () {}) : void 0);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  mode: X,\n  setMode: Q,\n  refresh: (e, n, t) => {\n    try {\n      console.warn(\"Userfront.refresh() is deprecated and will be removed. Please use Userfront.tokens.refresh() instead.\");\n    } catch (e) {}\n\n    return M();\n  },\n  login: function () {\n    let {\n      method: e,\n      userId: n,\n      userUuid: r,\n      email: o,\n      username: i,\n      emailOrUsername: s,\n      phoneNumber: c,\n      password: l,\n      token: f,\n      uuid: m,\n      totpCode: p,\n      backupCode: w,\n      channel: v,\n      verificationCode: P,\n      redirect: R,\n      handleUpstreamResponse: g,\n      handleMfaRequired: U,\n      handlePkceRequired: q,\n      handleTokens: $,\n      handleRedirect: E,\n      options: j\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      if (!e) throw new Error('Userfront.login called without \"method\" property.');\n\n      switch (y(), e) {\n        case \"apple\":\n        case \"azure\":\n        case \"facebook\":\n        case \"github\":\n        case \"google\":\n        case \"linkedin\":\n        case \"okta\":\n          return Promise.resolve(L({\n            provider: e,\n            redirect: R\n          }));\n\n        case \"password\":\n          return Promise.resolve(function (_ref21) {\n            let {\n              email: e,\n              username: n,\n              emailOrUsername: r,\n              password: o,\n              redirect: i,\n              handleUpstreamResponse: s,\n              handleMfaRequired: c,\n              handlePkceRequired: u,\n              handleTokens: h,\n              handleRedirect: l,\n              options: f\n            } = _ref21;\n\n            try {\n              return Promise.resolve(O(function () {\n                const a = {\n                  tenantId: t.tenantId,\n                  emailOrUsername: e || n || r,\n                  password: o\n                };\n                return f && f.noResetEmail && (a.options = {\n                  noResetEmail: !0\n                }), Promise.resolve(d(\"/auth/basic\", a, {\n                  headers: k(),\n                  params: T()\n                })).then(function (_ref22) {\n                  let {\n                    data: e\n                  } = _ref22;\n                  return b({\n                    data: e,\n                    redirect: i,\n                    handleUpstreamResponse: s,\n                    handleMfaRequired: c,\n                    handlePkceRequired: u,\n                    handleTokens: h,\n                    handleRedirect: l\n                  });\n                });\n              }, function (e) {\n                a(e);\n              }));\n            } catch (e) {\n              return Promise.reject(e);\n            }\n          }({\n            email: o,\n            username: i,\n            emailOrUsername: s,\n            password: l,\n            redirect: R,\n            handleUpstreamResponse: g,\n            handleMfaRequired: U,\n            handlePkceRequired: q,\n            handleTokens: $,\n            handleRedirect: E,\n            options: j\n          }));\n\n        case \"password-migrate\":\n          return Promise.resolve(function (_ref23) {\n            let {\n              email: e,\n              username: n,\n              emailOrUsername: r,\n              password: o,\n              redirect: i,\n              handleUpstreamResponse: s,\n              handleMfaRequired: c,\n              handlePkceRequired: u,\n              handleTokens: h,\n              handleRedirect: l,\n              options: f\n            } = _ref23;\n\n            try {\n              return Promise.resolve(function (a, m) {\n                try {\n                  var p = function () {\n                    const a = {\n                      tenantId: t.tenantId,\n                      emailOrUsername: e || n || r,\n                      password: o\n                    };\n                    return f && f.noResetEmail && (a.options = {\n                      noResetEmail: !0\n                    }), Promise.resolve(d(\"/auth/password/migrate\", a, {\n                      headers: k(),\n                      params: T()\n                    })).then(function (_ref24) {\n                      let {\n                        data: e\n                      } = _ref24;\n                      return b({\n                        data: e,\n                        redirect: i,\n                        handleUpstreamResponse: s,\n                        handleMfaRequired: c,\n                        handlePkceRequired: u,\n                        handleTokens: h,\n                        handleRedirect: l\n                      });\n                    });\n                  }();\n                } catch (e) {\n                  return m(e);\n                }\n\n                return p && p.then ? p.then(void 0, m) : p;\n              }(0, function (e) {\n                a(e);\n              }));\n            } catch (e) {\n              return Promise.reject(e);\n            }\n          }({\n            email: o,\n            username: i,\n            emailOrUsername: s,\n            password: l,\n            redirect: R,\n            handleUpstreamResponse: g,\n            handleMfaRequired: U,\n            handlePkceRequired: q,\n            handleTokens: $,\n            handleRedirect: E,\n            options: j\n          }));\n\n        case \"passwordless\":\n          return Promise.resolve(D({\n            email: o\n          }));\n\n        case \"link\":\n          return Promise.resolve(function () {\n            let {\n              token: e,\n              uuid: n,\n              redirect: r,\n              handleUpstreamResponse: o,\n              handleMfaRequired: i,\n              handlePkceRequired: s,\n              handleTokens: c,\n              handleRedirect: d\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            try {\n              return Promise.resolve(B(function () {\n                if (e = e || I(\"token\"), n = n || I(\"uuid\"), e && n) return Promise.resolve(u(\"/auth/link\", {\n                  token: e,\n                  uuid: n,\n                  tenantId: t.tenantId\n                }, {\n                  headers: k(),\n                  params: T()\n                })).then(function (_ref25) {\n                  let {\n                    data: e\n                  } = _ref25;\n                  return b({\n                    data: e,\n                    redirect: r,\n                    handleUpstreamResponse: o,\n                    handleMfaRequired: i,\n                    handlePkceRequired: s,\n                    handleTokens: c,\n                    handleRedirect: d\n                  });\n                });\n              }, function (e) {\n                a(e);\n              }));\n            } catch (e) {\n              return Promise.reject(e);\n            }\n          }({\n            token: f,\n            uuid: m,\n            redirect: R,\n            handleUpstreamResponse: g,\n            handleMfaRequired: U,\n            handlePkceRequired: q,\n            handleTokens: $,\n            handleRedirect: E\n          }));\n\n        case \"totp\":\n          return Promise.resolve(function () {\n            let {\n              totpCode: e,\n              backupCode: n,\n              userId: r,\n              userUuid: o,\n              emailOrUsername: i,\n              email: s,\n              username: c,\n              phoneNumber: u,\n              redirect: h,\n              handleUpstreamResponse: l,\n              handleMfaRequired: f,\n              handlePkceRequired: m,\n              handleTokens: p,\n              handleRedirect: w\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            try {\n              return Promise.resolve(V(function () {\n                return Promise.resolve(d(\"/auth/totp\", {\n                  totpCode: e,\n                  backupCode: n,\n                  userId: r,\n                  userUuid: o,\n                  emailOrUsername: i,\n                  email: s,\n                  username: c,\n                  phoneNumber: u,\n                  tenantId: t.tenantId\n                }, {\n                  headers: k(),\n                  params: T()\n                })).then(function (_ref26) {\n                  let {\n                    data: e\n                  } = _ref26;\n                  return b({\n                    data: e,\n                    redirect: h,\n                    handleUpstreamResponse: l,\n                    handleMfaRequired: f,\n                    handlePkceRequired: m,\n                    handleTokens: p,\n                    handleRedirect: w\n                  });\n                });\n              }, function (e) {\n                a(e);\n              }));\n            } catch (e) {\n              return Promise.reject(e);\n            }\n          }({\n            totpCode: p,\n            backupCode: w,\n            userId: n,\n            userUuid: r,\n            emailOrUsername: s,\n            email: o,\n            username: i,\n            phoneNumber: c,\n            redirect: R,\n            handleUpstreamResponse: g,\n            handleMfaRequired: U,\n            handlePkceRequired: q,\n            handleTokens: $,\n            handleRedirect: E\n          }));\n\n        case \"verificationCode\":\n          return Promise.resolve(function () {\n            let {\n              channel: e,\n              verificationCode: n,\n              email: r,\n              phoneNumber: o,\n              redirect: i,\n              handleUpstreamResponse: s,\n              handleMfaRequired: c,\n              handlePkceRequired: d,\n              handleTokens: h,\n              handleRedirect: l\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            try {\n              return Promise.resolve(J(function () {\n                return W({\n                  channel: e,\n                  phoneNumber: o,\n                  email: r\n                }), Promise.resolve(u(\"/auth/code\", {\n                  channel: e,\n                  verificationCode: n,\n                  email: r,\n                  phoneNumber: o,\n                  tenantId: t.tenantId\n                }, {\n                  headers: k(),\n                  params: T()\n                })).then(function (_ref27) {\n                  let {\n                    data: e\n                  } = _ref27;\n                  return b({\n                    data: e,\n                    redirect: i,\n                    handleUpstreamResponse: s,\n                    handleMfaRequired: c,\n                    handlePkceRequired: d,\n                    handleTokens: h,\n                    handleRedirect: l\n                  });\n                });\n              }, function (e) {\n                a(e);\n              }));\n            } catch (e) {\n              return Promise.reject(e);\n            }\n          }({\n            channel: v,\n            email: o,\n            phoneNumber: c,\n            verificationCode: P,\n            redirect: R,\n            handleUpstreamResponse: g,\n            handleMfaRequired: U,\n            handlePkceRequired: q,\n            handleTokens: $,\n            handleRedirect: E\n          }));\n\n        case \"saml\":\n          return Promise.resolve(function () {\n            try {\n              return Promise.resolve(function (e, n) {\n                try {\n                  var r = t.tokens.accessToken ? Promise.resolve(h(\"/auth/saml/idp/token\", {\n                    headers: {\n                      authorization: `Bearer ${t.tokens.accessToken}`\n                    }\n                  })).then(function (_ref28) {\n                    let {\n                      data: e\n                    } = _ref28;\n                    window.location.assign(`${t.baseUrl}auth/saml/idp/login?tenant_id=${t.tenantId}&token=${e.token}&uuid=${t.user.userUuid}`);\n                  }) : console.warn(\"Cannot complete SAML login without access token\");\n                } catch (e) {\n                  return n(e);\n                }\n\n                return r && r.then ? r.then(void 0, n) : r;\n              }(0, function (e) {\n                a(e);\n              }));\n            } catch (e) {\n              return Promise.reject(e);\n            }\n          }());\n\n        default:\n          throw new Error('Userfront.login called with invalid \"method\" property.');\n      }\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  resetPassword: A,\n  updatePassword: x,\n  sendLoginLink: function (e) {\n    try {\n      return Promise.resolve(B(function () {\n        return Promise.resolve(d(\"/auth/link\", {\n          email: e,\n          tenantId: t.tenantId\n        })).then(function (_ref29) {\n          let {\n            data: e\n          } = _ref29;\n          return e;\n        });\n      }, function (e) {\n        a(e);\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  sendResetLink: function (e) {\n    try {\n      return Promise.resolve(O(function () {\n        return Promise.resolve(d(\"/auth/reset/link\", {\n          email: e,\n          tenantId: t.tenantId\n        })).then(function (_ref30) {\n          let {\n            data: e\n          } = _ref30;\n          return e;\n        });\n      }, function (e) {\n        a(e);\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  sendVerificationCode: K,\n  signup: function () {\n    let {\n      method: e,\n      email: n,\n      username: r,\n      phoneNumber: o,\n      name: i,\n      data: s,\n      password: c,\n      channel: u,\n      redirect: h,\n      handleUpstreamResponse: l,\n      handleMfaRequired: f,\n      handlePkceRequired: m,\n      handleTokens: p,\n      handleRedirect: w\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      if (y(), !e) throw new Error('Userfront.signup called without \"method\" property.');\n\n      switch (e) {\n        case \"apple\":\n        case \"azure\":\n        case \"facebook\":\n        case \"github\":\n        case \"google\":\n        case \"linkedin\":\n        case \"okta\":\n          return Promise.resolve(L({\n            provider: e,\n            redirect: h\n          }));\n\n        case \"password\":\n          return Promise.resolve(function () {\n            let {\n              username: e,\n              name: n,\n              email: r,\n              password: o,\n              userData: i,\n              redirect: s,\n              handleUpstreamResponse: c,\n              handleMfaRequired: u,\n              handlePkceRequired: h,\n              handleTokens: l,\n              handleRedirect: f\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            try {\n              return Promise.resolve(O(function () {\n                return Promise.resolve(d(\"/auth/create\", {\n                  tenantId: t.tenantId,\n                  username: e,\n                  name: n,\n                  email: r,\n                  password: o,\n                  data: i\n                }, {\n                  headers: k(),\n                  params: T()\n                })).then(function (_ref31) {\n                  let {\n                    data: e\n                  } = _ref31;\n                  return b({\n                    data: e,\n                    redirect: s,\n                    handleUpstreamResponse: c,\n                    handleMfaRequired: u,\n                    handlePkceRequired: h,\n                    handleTokens: l,\n                    handleRedirect: f\n                  });\n                });\n              }, function (e) {\n                a(e);\n              }));\n            } catch (e) {\n              return Promise.reject(e);\n            }\n          }({\n            username: r,\n            name: i,\n            email: n,\n            password: c,\n            userData: s,\n            redirect: h,\n            handleUpstreamResponse: l,\n            handleMfaRequired: f,\n            handlePkceRequired: m,\n            handleTokens: p,\n            handleRedirect: w\n          }));\n\n        case \"passwordless\":\n          return Promise.resolve(D({\n            email: n,\n            name: i,\n            username: r,\n            userData: s\n          }));\n\n        case \"verificationCode\":\n          return Promise.resolve(K({\n            channel: u,\n            email: n,\n            phoneNumber: o,\n            name: i,\n            username: r,\n            data: s\n          }));\n\n        default:\n          throw new Error('Userfront.signup called with invalid \"method\" property.');\n      }\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  store: t,\n  tokens: F,\n  accessToken: function () {\n    return t.tokens.accessToken = n.get(t.tokens.accessTokenName), t.tokens.accessToken;\n  },\n  idToken: function () {\n    return t.tokens.idToken = n.get(t.tokens.idTokenName), t.tokens.idToken;\n  },\n  getSession: v,\n  redirectIfLoggedIn: function () {\n    let {\n      redirect: e\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      return Promise.resolve(v()).then(function (_ref32) {\n        let {\n          isLoggedIn: n\n        } = _ref32;\n        if (!n) return m();\n        if (R.usePkce) return;\n        if (e) return q(e);\n        if (I(\"redirect\")) return q(I(\"redirect\"));\n\n        const r = function (e, n) {\n          try {\n            var r = Promise.resolve(h(\"/self\", {\n              headers: {\n                authorization: `Bearer ${t.tokens.accessToken}`\n              }\n            })).then(function (_ref33) {\n              let {\n                data: e\n              } = _ref33;\n              e.tenant && e.tenant.loginRedirectPath && q(e.tenant.loginRedirectPath);\n            });\n          } catch (e) {\n            return n();\n          }\n\n          return r && r.then ? r.then(void 0, n) : r;\n        }(0, function () {\n          m();\n        });\n\n        return r && r.then ? r.then(function () {}) : void 0;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  redirectIfLoggedOut: function () {\n    let {\n      redirect: e\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      return Promise.resolve(v()).then(function (_ref34) {\n        let {\n          isLoggedIn: n\n        } = _ref34;\n        if (!n) return m(), e ? q(e) : I(\"redirect\") ? q(I(\"redirect\")) : void 0;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  user: s\n};\nexport { te as default };","map":{"version":3,"mappings":"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","names":["store","user","tokens","mode","token","base64","split","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","error","console","payload","getJwtPayload","exp","response","data","message","reduceSlashes","str","put","path","options","url","baseUrl","axios","post","e","get","value","type","cookieName","tenantId","secure","sameSite","Cookies","set","name","domains","location","pathname","hostname","primaryDomain","paths","undefined","err","domain","remove","removeAllCookies","removeCookie","accessTokenName","idTokenName","refreshTokenName","accessToken","idToken","refreshToken","attr","unsetUser","isFirstFactorTokenPresent","authenticationData","firstFactorToken","getMfaHeaders","authorization","clearMfa","secondFactors","getSession","getIsLoggedIn","Promise","isLoggedIn","needsSecondFactor","firstFactors","resetMfaState","body","recover","result","isAccessTokenLocallyValid","isJwtLocallyValid","refresh","then","_catch","codeChallenge","usePkce","clearPkceDataFromLocalStorage","isBrowser","localStorage","removeItem","codeChallengeFromQueryParams","getQueryAttr","writePkceDataToLocalStorage","expiresAt","Date","now","setItem","codeChallengeFromLocalStorage","getItem","parseInt","readPkceDataFromLocalStorage","getPkceRequestQueryParams","code_challenge","attrName","href","indexOf","defaultHandleRedirect","redirect","redirectToPath","redirectTo","pathOrUrl","document","el","createElement","assign","hash","search","handleLoginResponse","handleRedirect","handleUpstreamResponse","handleMfaRequired","handlePkceRequired","handleTokens","hasOwnProperty","redirectValue","_temp5","Error","authorizationCode","defaultHandlePkceRequired","warn","_url","searchParams","_exit2","defaultHandleTokens","defaultHandleMfaRequired","isMfaRequired","authentication","upstreamResponse","setCookiesAndTokens","setCookie","access","cookieOptions","id","setTokensFromCookies","headers","status","throwFormattedError","basicRefresh","C","exchange","tokenName","idTokenPayload","propsToDefine","prop","setUser","updatePasswordWithJwt","existingPassword","password","Authorization","updatePasswordWithLink","uuid","updatePassword","method","resetPassword","signonWithSso","provider","getProviderLink","origin","encodeURIComponent","email","username","userData","enforceChannel","channel","phoneNumber","sendVerificationCode","res","privateIPRegex","setMode","reason","getReason","Array","isArray","modeValue","isTestHostname","hn","match","isHttps","protocol","setModeSync","update","Object","keys","length","hasRole","roleName","roles","getTotp","initCallbacks","isRegistered","addInitCallback","cb","push","init","opts","endsWith","defaults","common","forEach","registerUrlChangedEventListener","history","pushState","f","ret","apply","this","arguments","dispatchEvent","replaceState","Event","addEventListener","logout","_temp2","userUuid","completeSamlLogout","a","b","login","userId","emailOrUsername","totpCode","backupCode","verificationCode","setupPkce","resolve","noResetEmail","params","loginWithPassword","loginWithPasswordMigrate","sendPasswordlessLink","loginWithLink","loginWithTotp","loginWithVerificationCode","completeSamlLogin","sendLoginLink","sendResetLink","signup","signupWithPassword","redirectIfLoggedIn","pkceStore","_temp","tenant","loginRedirectPath","redirectIfLoggedOut"],"sources":["E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\store.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\utils.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\user.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\api.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\cookies.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\tokens.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\mfa.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\session.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\pkce.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\url.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\authentication.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\refresh.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\password.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\sso.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\link.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\verificationCode.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\totp.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\logout.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\constants.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\mode.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\user.methods.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\index.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\login.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\password.migrate.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\saml.js","E:\\Course Curator\\portfolio-app-react\\node_modules\\@userfront\\core\\src\\signup.js"],"sourcesContent":["export const store = {\n  user: {},\n  tokens: {},\n  mode: \"live\",\n};\n","/**\n * This file is for zero-dependency utilities that can\n * be imported by any other file. Don't add any imports\n * to this file other than constants\n */\n\n/**\n * Get the unverified base64 decoded payload of a JWT\n *\n * @param {String} token - JSON Web Token\n * @returns {Object}\n */\nexport function getJwtPayload(token) {\n  try {\n    // Split token into constituent parts\n    const base64Url = token.split('.')[1];\n    // Convert from base64url to base64 encoding\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    \n    // To correctly decode a UTF-8 string without misinterpreting non-ASCII characters:\n    // 1. Decode the base64 to a UTF-16 string that may contain misinterpreted chars (window.atob)\n    //    -> DOMStrings are natively UTF-16LE, while JWTs are UTF-8\n    // 2. Convert the string to percent encoding (map each char to %HH where HH = hex value of byte)\n    //    (the '00' + ... + .slice(-2) bit ensures a single char is encoded correctly,\n    //     not strictly necessary here but included for correctness)\n    // 3. Interpret the percent-encoded string as a URI component, which is UTF-8 by definition (decodeURIComponent)\n    //    -> now non-ASCII characters \n    //  \n    const jsonPayload = decodeURIComponent(window.atob(base64).split('').map(c => \n      '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\n    ).join(''));\n\n    return JSON.parse(jsonPayload);\n  } catch (error) {\n    console.error(\"Problem decoding JWT payload\", error);\n  }\n}\n\n/*\n  Worked example of decoding above:\n  A JWT payload {\"foo\":\"bår\"} is base64url encoded as eyJmb28iOiJiw6VyIn0\n  1. base64url to base64: eyJmb28iOiJiw6VyIn0\n    = eyJmb28iOiJiw6VyIn0\n    (no change in this case)\n  2. base64 to DOMString: atob(eyJmb28iOiJiw6VyIn0)\n    = {\"foo\":\"bÃ¥r\"}\n    ->  \"å\" in UTF-8 encoding = 0xC3 0xA5\n        0xC3 0xA5 as UTF-16LE = Ã¥\n  3. DOMString to percent-encoding\n    = %7b%22%66%6f%6f%22%3a%22%62 %c3%a5 %72%22%7d\n    -> Ã¥ was encoded as %c3%a5 \n  4. Percent-encoded UTF-8 to DOMString\n    = {\"foo\":\"bår\"}\n    ->  URIs are always UTF-8, so decodeURIComponent knows to interpret the percent-encoded\n        string as UTF-8.\n        (As before, DOMStrings are UTF-16LE, so internally \"å\" is encoded as 0xE5 per UTF-16.)\n  Note: UTF-8 and UTF-16 are equivalent in the ASCII range 0x00 - 0x7f, so atob(base64) is OK\n  if it's known that the string uses only those characters.\n*/\n\n/**\n * Client-side check:\n * Determine whether the given JWT is present and unexpired\n *\n * @param {String} token JSON Web Token\n * @returns {Boolean}\n */\nexport function isJwtLocallyValid(token) {\n  try {\n    // Must be present\n    if (!token) {\n      return false;\n    }\n\n    // Must not be expired\n    const payload = getJwtPayload(token);\n    return new Date(payload.exp * 1000) > new Date();\n  } catch (error) {\n    return false;\n  }\n}\n\nexport function throwFormattedError(error) {\n  if (!error) return;\n  if (typeof error === \"string\") throw new Error(error);\n  if (error?.response?.data?.message) {\n    throw new Error(error.response.data.message);\n  }\n  throw error;\n}\n\nexport function isBrowser() {\n  return typeof window !== \"undefined\";\n}","import { store } from \"./store.js\";\nimport { getJwtPayload } from \"./utils.js\";\n\n/**\n * Define the store.user object based on the ID token\n */\nexport function setUser() {\n  if (!store.tokens.idToken) {\n    return console.warn(\"Cannot define user: missing ID token\");\n  }\n\n  store.user = store.user || {};\n  const idTokenPayload = getJwtPayload(store.tokens.idToken);\n\n  // Set basic user information properties from ID token\n  const propsToDefine = [\n    \"email\",\n    \"phoneNumber\",\n    \"username\",\n    \"name\",\n    \"image\",\n    \"data\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"mode\",\n    \"userId\",\n    \"userUuid\",\n    \"tenantId\",\n    \"isEmailConfirmed\",\n    \"isPhoneNumberConfirmed\",\n    \"confirmedEmailAt\",\n    \"confirmedPhoneNumberAt\",\n    \"isMfaRequired\",\n    \"isConfirmed\", // Deprecated\n  ];\n  for (const prop of propsToDefine) {\n    if (prop === \"update\") return;\n    store.user[prop] = idTokenPayload[prop];\n  }\n}\n\n/**\n * Remove all user information\n */\nexport function unsetUser() {\n  for (const attr in store.user) {\n    if (typeof store.user[attr] !== \"function\") {\n      delete store.user[attr];\n    }\n  }\n}\n\n/**\n * Export the store.user object with the update method added\n */\nexport const user = store.user;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\n\n// Replace multiple slashes // with single slash / (except in the protocol)\nfunction reduceSlashes(str) {\n  return str.replace(/([^:]\\/)\\/+/g, \"$1\");\n}\n\n/**\n * Perform a GET request\n * @param {String} path\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function get(path, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.get(url, options);\n}\n\n/**\n * Perform a POST request\n * @param {String} path\n * @param {Object} payload\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function post(path, payload, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.post(url, payload, options);\n}\n\n/**\n * Perform a PUT request\n * @param {String} path\n * @param {Object} payload\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function put(path, payload, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.put(url, payload, options);\n}\n\nexport default {\n  get,\n  post,\n  put,\n};\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { unsetTokens } from \"./tokens.js\";\n\n/**\n * Set a cookie value based on the given options.\n * @param {String} value\n * @param {Object} options\n * @param {String} type\n */\nexport function setCookie(value, options, type) {\n  const cookieName = `${type}.${store.tenantId}`;\n  options = options || {\n    secure: store.mode === \"live\",\n    sameSite: \"Lax\",\n  };\n  if (type === \"refresh\") {\n    options.sameSite = \"Strict\";\n  }\n  Cookies.set(cookieName, value, options);\n}\n\n/**\n * Remove a cookie by name, regardless of its cookie setting(s).\n * @param {String} name\n */\nfunction removeCookie(name) {\n  // Define all possible path and domain combinations\n  let paths, domains;\n  try {\n    const path = window.location.pathname;\n    const hostname = window.location.hostname;\n    const hostnameParts = hostname.split(\".\");\n    const primaryDomain = hostnameParts.slice(-2).join(\".\");\n    paths = [undefined, path, \"/\"];\n    domains = [\n      undefined,\n      hostname,\n      `.${hostname}`,\n      primaryDomain,\n      `.${primaryDomain}`,\n    ];\n  } catch (err) {\n    paths = [undefined, \"/\"];\n    domains = [undefined];\n  }\n\n  // Iterate over paths and domains, and remove cookies if present\n  paths.map((path) => {\n    domains.map((domain) => {\n      const options = {};\n      if (domain) options.domain = domain;\n      if (path) options.path = path;\n      Cookies.remove(name, options);\n    });\n  });\n}\n\n/**\n * Remove all auth cookies (access, id, refresh).\n */\nexport function removeAllCookies() {\n  removeCookie(store.tokens.accessTokenName);\n  removeCookie(store.tokens.idTokenName);\n  removeCookie(store.tokens.refreshTokenName);\n  unsetTokens();\n}\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { setUser, unsetUser } from \"./user.js\";\nimport { refresh } from \"./refresh.js\";\nimport { isJwtLocallyValid } from \"./utils.js\";\nimport { setCookiesAndTokens } from \"./authentication.js\";\nimport { exchange } from \"./refresh.js\";\n\nstore.tokens = store.tokens || {};\nstore.tokens.refresh = refresh;\n\nexport function setTokenNames() {\n  store.tokens = store.tokens || {};\n  store.tokens.accessTokenName = `access.${store.tenantId}`;\n  store.tokens.idTokenName = `id.${store.tenantId}`;\n  store.tokens.refreshTokenName = `refresh.${store.tenantId}`;\n}\n\n/**\n * Set and then return the access token\n */\nexport function accessToken() {\n  store.tokens.accessToken = Cookies.get(store.tokens.accessTokenName);\n  return store.tokens.accessToken;\n}\n\n/**\n * Set and then return the ID token\n */\nexport function idToken() {\n  store.tokens.idToken = Cookies.get(store.tokens.idTokenName);\n  return store.tokens.idToken;\n}\n\n/**\n * Define the store token values from the cookie values.\n */\nexport function setTokensFromCookies() {\n  const tokenNames = [\"access\", \"id\", \"refresh\"];\n  tokenNames.map((tokenName) => {\n    try {\n      const token = Cookies.get(store.tokens[`${tokenName}TokenName`]);\n      store.tokens[`${tokenName}Token`] = token;\n\n      // Set the user object whenever the ID token is set\n      if (tokenName === \"id\" && token) {\n        setUser();\n      }\n    } catch (error) {\n      console.warn(`Problem setting ${tokenName} token.`);\n    }\n  });\n}\n\n/**\n * Set the store token values to undefined\n */\nexport function unsetTokens() {\n  store.tokens.accessToken = undefined;\n  store.tokens.idToken = undefined;\n  store.tokens.refreshToken = undefined;\n  unsetUser();\n}\n\n/**\n * Client-side check:\n * Determine whether the access token is present and unexpired\n * @returns {Boolean}\n */\nexport function isAccessTokenLocallyValid() {\n  return isJwtLocallyValid(store.tokens.accessToken);\n}\n\n/**\n * Client-side check:\n * Determine whether the refresh token is present and unexpired\n * @returns {Boolean}\n */\nexport function isRefreshTokenLocallyValid() {\n  return isJwtLocallyValid(store.tokens.refreshToken);\n}\n\n/**\n * Set the cookies and store.tokens based on a tokens object\n * @property {Object} tokens An object containing JWT access, refresh, and ID tokens\n * @property {Object} data The response object from the API\n * @returns\n */\nexport async function defaultHandleTokens(tokens, data) {\n  setCookiesAndTokens(tokens);\n  await exchange(data);\n}\n\n/**\n * Export the store.tokens object\n */\nexport const tokens = store.tokens;\n\n// NOTE Commenting this out 6/11/21 because the packages it relies on (jsonwebtoken & jwks-rsa)\n// both cause a lot of bloat. If we want to verify tokens, this is a nice way to do it, but\n// we need to find libraries designed for the browser instead of node.\n/**\n * Verify the provided token\n * @param {String} token\n * @returns {Promise<void>} The provided token has been verified if `verifyToken` resolves without error\n */\n// export async function verifyToken(token) {\n//   if (!token) throw new Error(\"Missing token\");\n\n//   let publicKey;\n//   try {\n//     const decodedToken = jwt.decode(token, { complete: true });\n//     if (!decodedToken.header || !decodedToken.header.kid) {\n//       throw new Error(\"Token kid not defined\");\n//     }\n\n//     const client = new JwksClient({\n//       jwksUri: `${apiUrl}tenants/${store.tenantId}/jwks/${store.mode}`,\n//       requestHeaders: { origin: window.location.origin },\n//     });\n\n//     const key = await client.getSigningKey(decodedToken.header.kid);\n//     publicKey = key.getPublicKey();\n//   } catch (error) {\n//     throw error;\n//   }\n\n//   if (!publicKey) {\n//     throw new Error(\"Public key not found\");\n//   }\n\n//   try {\n//     jwt.verify(token, publicKey);\n//   } catch (error) {\n//     throw new Error(\"Token verification failed\");\n//   }\n\n//   return Promise.resolve();\n// }\n","import { store } from \"./store.js\";\nimport { authenticationData } from \"./authentication.js\";\n\n/**\n * Set authenticationData.firstFactors from the authentication object\n * @param {Object} authentication\n * {\n *   firstFactors,\n *   secondFactors\n * }\n * @returns\n */\nexport function setFirstFactors(authentication) {\n  // If we're not initialized, there are no first factors.\n  if (!store.tenantId) {\n    console.warn(\n      \"setFirstFactors: tried to set factors without a tenantId set.\"\n    );\n    return;\n  }\n  // If we're passed an invalid argument, keep the authentication data as is.\n  if (\n    !authentication ||\n    typeof authentication !== \"object\" ||\n    !Array.isArray(authentication.firstFactors)\n  ) {\n    console.warn(\"setFirstFactors: invalid factors passed.\");\n    return;\n  }\n  authenticationData.firstFactors = authentication.firstFactors;\n}\n\n/**\n * Check if MFA is required for the ongoing signup or login flow.\n * @returns {Boolean} true if MFA is currently required\n */\nexport function isFirstFactorTokenPresent() {\n  return !!authenticationData.firstFactorToken;\n}\n\n/**\n * Update the MFA service state given a response to a signup or login call.\n * Adds secondFactors and firstFactorToken if it is a MFA Required response,\n * removes them if it is a successful signup or login,\n * leaves the service unchanged otherwise.\n * @param {Object} data\n */\nexport function defaultHandleMfaRequired(firstFactorToken, data) {\n  if (!data.isMfaRequired) {\n    // If we've logged in or signed up successfully,\n    // clear the MFA service state.\n    if (data.message === \"OK\") {\n      clearMfa();\n    }\n    return;\n  }\n  authenticationData.firstFactorToken = firstFactorToken;\n  authenticationData.secondFactors = data.authentication.secondFactors;\n}\n\n/**\n * If MFA is required, returns a headers object with authorization set to the firstFactorToken.\n * Otherwise, returns an empty object.\n * @returns {Object} a headers object with MFA authorization header set, or empty if MFA is not required\n */\nexport function getMfaHeaders() {\n  if (authenticationData.firstFactorToken) {\n    return {\n      authorization: `Bearer ${authenticationData.firstFactorToken}`,\n    };\n  }\n  return {};\n}\n\n/**\n * Clears the current transient state of the MFA service,\n * leaving the tenant's persistent state in place.\n */\nexport function clearMfa() {\n  authenticationData.secondFactors = [];\n  authenticationData.firstFactorToken = null;\n}\n\n/**\n * Fully resets the MFA service, including the tenant's persistent state,\n * to it uninitialized state.\n */\nexport function resetMfa() {\n  clearMfa();\n  authenticationData.firstFactors = [];\n}\n","import {\n  isAccessTokenLocallyValid,\n  isRefreshTokenLocallyValid,\n} from \"./tokens.js\";\nimport { authenticationData } from \"./authentication.js\";\nimport { isFirstFactorTokenPresent, clearMfa } from \"./mfa.js\";\nimport { refresh } from \"./refresh.js\";\n\n/**\n * Determine whether a user is logged in by checking their\n * JWT access token and, if invalid, refreshing it and checking\n * again.\n * @returns {Promise<Boolean>}\n */\nasync function getIsLoggedIn() {\n  try {\n    // If the access token is locally valid, return true\n    if (isAccessTokenLocallyValid()) {\n      return true;\n    }\n\n    // If the refresh token is locally invalid, return false\n    if (!isRefreshTokenLocallyValid()) {\n      return false;\n    }\n\n    // Attempt to refresh the access token\n    await refresh();\n\n    // The access token should now be valid\n    return isAccessTokenLocallyValid();\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Return detailed information about the current session.\n * @returns {Promise<Object>}\n */\nexport async function getSession() {\n  const isLoggedIn = await getIsLoggedIn();\n  return {\n    isLoggedIn,\n    needsSecondFactor: isFirstFactorTokenPresent(),\n    firstFactors: authenticationData.firstFactors,\n    secondFactors: authenticationData.secondFactors,\n    resetMfaState: clearMfa,\n  };\n}\n","import { getQueryAttr } from \"./url.js\";\nimport { isBrowser } from \"./utils.js\";\n\nexport const store = {\n  codeChallenge: \"\",\n  get usePkce() {\n    return !!store.codeChallenge;\n  },\n};\n\n/**\n * Reads an unexpired challenge code from local storage\n * @returns {string?} the challenge code, if an unexpired one is in local storage\n */\nexport function readPkceDataFromLocalStorage() {\n  if (!isBrowser()) {\n    return;\n  }\n  const codeChallenge = window.localStorage.getItem(\"uf_pkce_code_challenge\");\n  if (codeChallenge) {\n    const expiresAt = window.localStorage.getItem(\n      \"uf_pkce_code_challenge_expiresAt\"\n    );\n    if (expiresAt && parseInt(expiresAt, 10) > Date.now()) {\n      return codeChallenge;\n    }\n  }\n}\n\n/**\n * Write a challenge code to local storage, expiring in 5 minutes\n * @param {string} codeChallenge\n * @returns\n */\nexport function writePkceDataToLocalStorage(codeChallenge) {\n  if (!isBrowser()) {\n    return;\n  }\n  if (!codeChallenge) {\n    return clearPkceDataFromLocalStorage();\n  }\n  store.codeChallenge = codeChallenge;\n  const expiresAt = Date.now() + 1000 * 60 * 5; // 5 minutes from now\n  try {\n    window.localStorage.setItem(\"uf_pkce_code_challenge\", codeChallenge);\n    window.localStorage.setItem(\"uf_pkce_code_challenge_expiresAt\", expiresAt);\n  } catch (err) {\n    // Suppress exception from full local storage\n  }\n}\n\n/**\n * Clear the challenge code and expiration from local storage\n */\nexport function clearPkceDataFromLocalStorage() {\n  if (!isBrowser()) {\n    return;\n  }\n  window.localStorage.removeItem(\"uf_pkce_code_challenge\");\n  window.localStorage.removeItem(\"uf_pkce_code_challenge_expiresAt\");\n}\n\n/**\n * Set up the PKCE service: look for a PKCE challenge code in\n * query params or local storage. If both are present, the query\n * param is preferred.\n * @returns {Boolean} true if we should use PKCE in our auth requests\n */\nexport function setupPkce() {\n  if (!isBrowser()) {\n    return;\n  }\n  const codeChallengeFromQueryParams = getQueryAttr(\"code_challenge\");\n  if (codeChallengeFromQueryParams) {\n    store.codeChallenge = codeChallengeFromQueryParams;\n    writePkceDataToLocalStorage(codeChallengeFromQueryParams);\n    return true;\n  }\n  const codeChallengeFromLocalStorage = readPkceDataFromLocalStorage();\n  if (codeChallengeFromLocalStorage) {\n    store.codeChallenge = codeChallengeFromLocalStorage;\n    return true;\n  }\n  clearPkceDataFromLocalStorage();\n  return false;\n}\n\n/**\n * Get (possibly empty) PKCE query params to attach to an auth request\n * @returns {object} an object to be used for an Axios request's params field\n */\nexport function getPkceRequestQueryParams() {\n  if (!store.usePkce) {\n    return {};\n  }\n  return { code_challenge: store.codeChallenge };\n}\n\n/**\n * Redirect to url with PKCE query params (authorization_code) set. Does not redirect\n * if url or authorizationCode are falsy.\n *\n * @param {string} url full URL to redirect to (may be a deep link for a mobile app)\n * @param {string} authorizationCode the authorization code received from the server\n * @returns\n */\nexport function defaultHandlePkceRequired(authorizationCode, url, data) {\n  if (!url || !authorizationCode) {\n    return;\n  }\n  if (!store.usePkce) {\n    console.warn(\n      \"Redirecting with a PKCE authorization code, but no PKCE challenge code is present in the client. This is unexpected.\"\n    );\n  }\n  const _url = new URL(url);\n  _url.searchParams.set(\"authorization_code\", authorizationCode);\n  clearPkceDataFromLocalStorage();\n  window.location.assign(_url.href);\n}\n","import { get } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\nimport { getSession } from \"./session.js\";\nimport { store as pkceStore } from \"./pkce.js\";\n\n/**\n * Get the value of a query attribute, e.g. ?attr=value\n * @param {String} attrName\n */\nexport function getQueryAttr(attrName) {\n  if (\n    typeof window !== \"object\" ||\n    typeof window.location !== \"object\" ||\n    !window.location.href ||\n    window.location.href.indexOf(`${attrName}=`) < 0\n  ) {\n    return;\n  }\n  return decodeURIComponent(\n    window.location.href.split(`${attrName}=`)[1].split(\"&\")[0]\n  );\n}\n\n/**\n * Redirect the browser based on explicit redirect input path, or the API response\n * @property {String|Boolean} redirect A path to redirect to, or false to not redirect\n * @property {Object} data The response object from the API\n * @returns\n */\nexport const defaultHandleRedirect = (redirect, data) => {\n  if (redirect === false) return;\n  // If redirect is the boolean true, redirect to the default redirect path, not to \"/true\"\n  if (redirect === true) {\n    const path = getQueryAttr(\"redirect\") || data.redirectTo || \"/\";\n    redirectToPath(path);\n    return;\n  }\n  const path = redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\";\n  redirectToPath(path);\n};\n\n/**\n * If the access token is valid, redirect the browser to the\n * tenant's After-login path.\n */\nexport async function redirectIfLoggedIn({ redirect } = {}) {\n  const { isLoggedIn } = await getSession();\n  if (!isLoggedIn) {\n    return removeAllCookies();\n  }\n\n  // TODO see #130: can handle this more elegantly once we have an exchange tokens -> authorizationCode\n  // endpoint on the server.\n  // If this is a PKCE auth session, don't redirect with this function ever.\n  // The only way to get an authorizationCode currently is to go through an auth flow.\n  // The PKCE module handles redirect after a PKCE Required response is received.\n  if (pkceStore.usePkce) {\n    return;\n  }\n\n  // Redirect to a provided path (check options first, then url querystring)\n  if (redirect) {\n    return redirectToPath(redirect);\n  } else if (getQueryAttr(\"redirect\")) {\n    return redirectToPath(getQueryAttr(\"redirect\"));\n  }\n\n  // If no path was provided, look up the path and then redirect there\n  try {\n    const { data } = await get(`/self`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    if (data.tenant && data.tenant.loginRedirectPath) {\n      redirectToPath(data.tenant.loginRedirectPath);\n    }\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\n/**\n * If the access token is invalid, redirect the browser to the\n * provided path.\n */\nexport async function redirectIfLoggedOut({ redirect } = {}) {\n  // If the user is logged in, return without doing anything\n  const { isLoggedIn } = await getSession();\n  if (isLoggedIn) {\n    return;\n  }\n\n  // Remove all cookies\n  removeAllCookies();\n\n  // Redirect to a provided path (check options first, then url querystring)\n  if (redirect) {\n    return redirectToPath(redirect);\n  } else if (getQueryAttr(\"redirect\")) {\n    return redirectToPath(getQueryAttr(\"redirect\"));\n  }\n\n  // If no redirect path was provided, do not redirect\n  return;\n}\n\n/**\n * Redirect to path portion of a URL.\n */\nexport function redirectToPath(pathOrUrl) {\n  // Return if no pathOrUrl, or if SSR or mobile\n  if (\n    !pathOrUrl ||\n    typeof document !== \"object\" ||\n    typeof window !== \"object\"\n  ) {\n    return;\n  }\n  try {\n    document && window;\n  } catch (error) {\n    return;\n  }\n\n  // Perform hard redirect\n  const el = document.createElement(\"a\");\n  el.href = pathOrUrl;\n  let path = `${el.pathname}${el.hash}${el.search}`;\n  if (el.pathname !== window.location.pathname) {\n    window.location.assign(path);\n  }\n}\n","import { defaultHandleTokens, setTokensFromCookies } from \"./tokens.js\";\nimport { setCookie } from \"./cookies.js\";\nimport { defaultHandleRedirect, getQueryAttr } from \"./url.js\";\nimport { defaultHandlePkceRequired } from \"./pkce.js\";\nimport { defaultHandleMfaRequired } from \"./mfa.js\";\n\n// Data specific to the MFA service\nexport const authenticationData = {\n  firstFactors: [],\n  secondFactors: [],\n  firstFactorToken: null,\n};\n\n/**\n * Set the cookies from a tokens object, and add to the local store.\n * @param {Object} tokens\n */\nexport function setCookiesAndTokens(tokens) {\n  setCookie(tokens.access.value, tokens.access.cookieOptions, \"access\");\n  setCookie(tokens.id.value, tokens.id.cookieOptions, \"id\");\n  if (tokens.refresh && tokens.refresh.value) {\n    setCookie(tokens.refresh.value, tokens.refresh.cookieOptions, \"refresh\");\n  }\n  setTokensFromCookies();\n}\n\n/**\n * Handle the API response for an authentication request\n * @property {Object} data\n * @property {String|Boolean} redirect\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n * @returns {Object} data (or redirection)\n */\nexport async function handleLoginResponse({\n  data,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n}) {\n  let redirectValue =\n    redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\";\n\n  // Handle upstreamResponse\n  if (typeof handleUpstreamResponse === \"function\") {\n    await handleUpstreamResponse(data.upstreamResponse, data);\n  }\n\n  // Handle \"MFA required\" response\n  if (data.hasOwnProperty(\"firstFactorToken\")) {\n    if (typeof handleMfaRequired === \"function\") {\n      await handleMfaRequired(data.firstFactorToken, data);\n    } else {\n      defaultHandleMfaRequired(data.firstFactorToken, data);\n    }\n    return data;\n  }\n\n  // Handle tokens\n  if (data.hasOwnProperty(\"tokens\")) {\n    if (typeof handleTokens === \"function\") {\n      await handleTokens(data.tokens, data);\n    } else {\n      await defaultHandleTokens(data.tokens, data);\n    }\n  }\n\n  // Handle \"PKCE required\" response\n  if (data.hasOwnProperty(\"authorizationCode\")) {\n    if (!redirectValue) {\n      throw new Error(\"Missing PKCE redirect url\");\n    }\n    if (typeof handlePkceRequired === \"function\") {\n      await handlePkceRequired(data.authorizationCode, redirectValue, data);\n    } else {\n      defaultHandlePkceRequired(data.authorizationCode, redirectValue, data);\n      return data;\n    }\n  }\n\n  // Handle redirection\n  if (data.hasOwnProperty(\"redirectTo\") && redirect !== false) {\n    if (typeof handleRedirect === \"function\") {\n      await handleRedirect(redirectValue, data);\n    } else {\n      defaultHandleRedirect(redirectValue, data);\n    }\n  }\n\n  return data;\n}\n","import Cookies from \"js-cookie\";\nimport { get } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./authentication.js\";\nimport { store } from \"./store.js\";\n// import { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Refresh the access and ID tokens\n * - When in test mode, uses the basic refresh method\n * - For tenants without a custom SSL certificate, uses the basic refresh method\n * - For tenants with a custom SSL certificate and in live mode, uses the httpOnly refresh method\n * @returns {Promise}\n */\nexport async function refresh() {\n  try {\n    await basicRefresh();\n  } catch (error) {\n    console.warn(`Refresh failed: ${error.message}`);\n  }\n}\n\n/**\n * Use a regular (non-httpOnly) cookie to refresh the access and ID tokens.\n *\n * The basic refresh method is used automatically in test mode and in live\n * mode whenever an SSL certificate has not been set up.\n */\nasync function basicRefresh() {\n  const refreshToken = Cookies.get(store.tokens.refreshTokenName);\n  try {\n    const { data, status } = await get(`/auth/refresh`, {\n      headers: {\n        authorization: `Bearer ${refreshToken}`,\n      },\n    });\n    if (status !== 200) {\n      throw new Error(data.message || \"Problem with request\");\n    }\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      return data;\n    } else {\n      throw new Error(\"Problem setting cookies\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable httpOnly refresh method once new endpoints are stable [06/15/21]\n/**\n *\n * The httpOnly refresh method is only available for tenants with configured\n * SSL certificates while in live mode.\n */\n// async function httpOnlyRefresh() {\n//   const iframe = getIframe();\n//   if (!iframe) return;\n//   return postMessageAsPromise({\n//     type: \"refresh\",\n//     tenantId: store.tenantId,\n//   });\n// }\n\n/**\n * Use a sessionId and nonce to set the iframe refresh token\n * @param {String} sessionId\n * @param {String} nonce\n * @returns {Promise}\n */\nexport async function exchange({ sessionId, nonce }) {\n  return;\n\n  // TODO re-enable httpOnly exchange method once new endpoints are stable [06/15/21]\n  // --------------------------\n  // const iframe = getIframe();\n  // if (!iframe) return;\n  // return postMessageAsPromise({\n  //   type: \"exchange\",\n  //   tenantId: store.tenantId,\n  //   payload: {\n  //     sessionId,\n  //     nonce,\n  //   },\n  // });\n}\n","import { post, put } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./authentication.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr, defaultHandleRedirect } from \"./url.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { handleLoginResponse } from \"./authentication.js\";\nimport { getMfaHeaders } from \"./mfa.js\";\nimport { getPkceRequestQueryParams } from \"./pkce.js\";\n\n/**\n * Register a new user with username, name, email, and password.\n * Redirect the browser after successful signup based on the redirectTo value returned.\n * @property {String} username\n * @property {String} name\n * @property {String} email\n * @property {String} password\n * @property {Object} userData - alias for the user.data object, since \"data\" is used in the response\n * @property {String} redirect - do not redirect if false, or redirect to a specific path\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n */\nexport async function signupWithPassword({\n  username,\n  name,\n  email,\n  password,\n  userData,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n} = {}) {\n  try {\n    const { data } = await post(\n      `/auth/create`,\n      {\n        tenantId: store.tenantId,\n        username,\n        name,\n        email,\n        password,\n        data: userData,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with email/username and password.\n * Redirect the browser after successful login based on the redirectTo value returned.\n * @property {String} email The user's email. One of email/username/emailOrUsername should be present.\n * @property {String} username The user's username. One of email/username/emailOrUsername should be present.\n * @property {String} emailOrUsername Either the user's email or username. One of email/username/emailOrUsername should be present.\n * @property {String} password\n * @property {String|Boolean} redirect\n *  URL to redirect to after login, or false to suppress redirect. Otherwise, redirects to the after-login path set on the server.\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n * @property {Object} options\n * @property {Boolean} options.noResetEmail\n *  By default, Userfront sends a password reset email if a user without a password tries to log in with a password.\n *  Set options.noResetEmail = true to override this behavior and return an error instead.\n *\n */\nexport async function loginWithPassword({\n  email,\n  username,\n  emailOrUsername,\n  password,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n  options,\n}) {\n  try {\n    const body = {\n      tenantId: store.tenantId,\n      emailOrUsername: email || username || emailOrUsername,\n      password,\n    };\n    if (options && options.noResetEmail) {\n      body.options = {\n        noResetEmail: true,\n      };\n    }\n    const { data } = await post(`/auth/basic`, body, {\n      headers: getMfaHeaders(),\n      params: getPkceRequestQueryParams(),\n    });\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a password reset link to the provided email.\n * @param {String} email\n */\nexport async function sendResetLink(email) {\n  try {\n    const { data } = await post(`/auth/reset/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Set a user's password with their link credentials or JWT access token.\n *\n * If no method is provided, the order is:\n * - Check for link credentials; then\n * - Check for a JWT access token first\n *\n * @property {String} method (optional) \"link\" or \"jwt\"\n * @property {String} password\n * @property {String} existingPassword\n * @property {String} uuid\n * @property {String} token\n * @property {String} redirect\n * @property {Function} handleUpstreamResponse - \n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n * @returns\n */\nexport async function updatePassword({\n  method,\n  password,\n  existingPassword,\n  uuid,\n  token,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n}) {\n  switch (method) {\n    // Allow for explicit setting of method\n    case \"link\":\n      return updatePasswordWithLink({\n        uuid,\n        token,\n        password,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n      });\n    case \"jwt\":\n      return updatePasswordWithJwt({ password, existingPassword });\n    default:\n      // Default (no method provided) is to look for link credentials first, then JWT access token\n      token = token || getQueryAttr(\"token\");\n      uuid = uuid || getQueryAttr(\"uuid\");\n      if (uuid && token) {\n        return updatePasswordWithLink({\n          uuid,\n          token,\n          password,\n          redirect,\n          handleUpstreamResponse,\n          handleMfaRequired,\n          handlePkceRequired,\n          handleTokens,\n          handleRedirect,\n        });\n      } else if (store.tokens.accessToken) {\n        return updatePasswordWithJwt({ password, existingPassword });\n      } else {\n        throw new Error(\n          \"updatePassword() was called without link credentials (token & uuid) or a JWT access token.\"\n        );\n      }\n  }\n}\n\nexport const resetPassword = updatePassword;\n\nexport async function updatePasswordWithLink({\n  uuid,\n  token,\n  password,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) throw new Error(\"Missing token or uuid\");\n    const { data } = await put(`/auth/reset`, {\n      tenantId: store.tenantId,\n      uuid,\n      token,\n      password,\n    });\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function updatePasswordWithJwt({ password, existingPassword }) {\n  try {\n    if (!store.tokens.accessToken) {\n      throw new Error(\n        `updatePassword({ method: \"jwt\" }) was called without a JWT access token.`\n      );\n    }\n\n    const { data } = await put(\n      `/auth/basic`,\n      {\n        tenantId: store.tenantId,\n        password,\n        existingPassword,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${store.tokens.accessToken}`,\n        },\n      }\n    );\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { store } from \"./store.js\";\nimport { getQueryAttr } from \"./url.js\";\n\nexport function getProviderLink({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  if (!store.tenantId) throw new Error(\"Missing tenantId\");\n\n  let url = `${store.baseUrl}auth/${provider}/login?tenant_id=${store.tenantId}&origin=${window.location.origin}`;\n\n  let redirectTo = redirect || getQueryAttr(\"redirect\");\n  if (redirect === false) {\n    redirectTo = typeof document === \"object\" && document.location.pathname;\n  }\n  if (redirectTo) {\n    url += `&redirect=${encodeURIComponent(redirectTo)}`;\n  }\n\n  return url;\n}\n\n/**\n * Log in or register a user via SSO provider.\n * Redirect the browser after successful authentication and 302 redirect from server.\n * @param {String} provider Name of SSO provider\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport function signonWithSso({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  const url = getProviderLink({ provider, redirect });\n  window.location.assign(url);\n}\n","import { post, put } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr } from \"./url.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { handleLoginResponse } from \"./authentication.js\";\nimport { getMfaHeaders } from \"./mfa.js\";\nimport { getPkceRequestQueryParams } from \"./pkce.js\";\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @property {String} token\n * @property {UUID} uuid\n * @property {String} redirect - do not redirect if false, or redirect to given path\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n */\nexport async function loginWithLink({\n  token,\n  uuid,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n} = {}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) return;\n\n    const { data } = await put(\n      \"/auth/link\",\n      {\n        token,\n        uuid,\n        tenantId: store.tenantId,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a login link to the provided email.\n * @param {String} email\n */\nexport async function sendLoginLink(email) {\n  try {\n    const { data } = await post(`/auth/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Create or update a user and send them a link to log in.\n * @param {Object} inputs\n */\nexport async function sendPasswordlessLink({\n  email,\n  name,\n  username,\n  userData,\n  options,\n}) {\n  try {\n    const { data } = await post(`/auth/link`, {\n      email,\n      name,\n      username,\n      data: userData,\n      options,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { post, put } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { handleLoginResponse } from \"./authentication.js\";\nimport { getMfaHeaders, isFirstFactorTokenPresent } from \"./mfa.js\";\nimport { getPkceRequestQueryParams } from \"./pkce.js\";\n\n/**\n * Verify that proper identifier is available for the channel\n * @property {String} channel \"sms\" or \"email\"\n * @property {String} phoneNumber\n * @property {String} email\n */\nfunction enforceChannel({ channel, phoneNumber, email }) {\n  // Enforce valid channels\n  if (channel !== \"sms\" && channel !== \"email\") {\n    throw new Error(\"Invalid channel\");\n  }\n\n  // Do not require phoneNumber or email when firstFactorToken is included\n  if (isFirstFactorTokenPresent()) {\n    return;\n  }\n\n  // Check that phoneNumber or email are present if needed\n  if (channel === \"sms\" && !phoneNumber) {\n    throw new Error(`SMS verification code requires \"phoneNumber\"`);\n  } else if (channel === \"email\" && !email) {\n    throw new Error(`Email verification code requires \"email\"`);\n  }\n}\n\n/**\n * Send a verification code to the provided email address or phone number.\n * @property {String} channel \"sms\" (default) or \"email\"\n * @property {String} phoneNumber\n * @property {String} email\n * @property {String} name\n * @property {String} username\n * @property {Object} data\n */\nexport async function sendVerificationCode({\n  channel = \"sms\",\n  phoneNumber,\n  email,\n  name,\n  username,\n  data,\n}) {\n  try {\n    enforceChannel({\n      channel,\n      phoneNumber,\n      email,\n    });\n\n    const { data: res } = await post(\n      `/auth/code`,\n      {\n        channel,\n        email,\n        phoneNumber,\n        name,\n        username,\n        data,\n        tenantId: store.tenantId,\n      },\n      {\n        headers: getMfaHeaders(),\n      }\n    );\n    return res;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithVerificationCode({\n  channel,\n  verificationCode,\n  email,\n  phoneNumber,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n} = {}) {\n  try {\n    enforceChannel({\n      channel,\n      phoneNumber,\n      email,\n    });\n\n    const { data } = await put(\n      `/auth/code`,\n      {\n        channel,\n        verificationCode,\n        email,\n        phoneNumber,\n        tenantId: store.tenantId,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get, post } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { handleLoginResponse } from \"./authentication.js\";\nimport { isFirstFactorTokenPresent, getMfaHeaders } from \"./mfa.js\";\nimport { getPkceRequestQueryParams } from \"./pkce.js\";\n\n/**\n * Log a user in with a TOTP authenticator code or a TOTP backup code,\n * plus an identifier for the user (e.g. userId, userUuid, or email)\n *\n * @property {String} totpCode \"123456\"\n * @property {String} backupCode \"aaaaa-bbbbb\"\n * @property {Integer} userId\n * @property {String} userUuid\n * @property {String} emailOrUsername\n * @property {String} email\n * @property {String} username\n * @property {String} phoneNumber\n * @property {String|Boolean} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithTotp({\n  totpCode,\n  backupCode,\n  userId,\n  userUuid,\n  emailOrUsername,\n  email,\n  username,\n  phoneNumber,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n} = {}) {\n  try {\n    const { data } = await post(\n      `/auth/totp`,\n      {\n        totpCode,\n        backupCode,\n        userId,\n        userUuid,\n        emailOrUsername,\n        email,\n        username,\n        phoneNumber,\n        tenantId: store.tenantId,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function getTotp() {\n  try {\n    if (isFirstFactorTokenPresent()) {\n      const { data } = await get(`/auth/totp`, {\n        headers: getMfaHeaders(),\n      });\n      return data;\n    }\n\n    if (!store.tokens.accessToken) {\n      throw new Error(`getTotp() was called without a JWT access token.`);\n    }\n\n    const { data } = await get(`/auth/totp`, {\n      headers: {\n        Authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get } from \"./api.js\";\nimport { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\nimport { setTokensFromCookies } from \"./tokens.js\";\nimport { defaultHandleRedirect } from \"./url\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Log a user out and redirect to the logout path.\n */\nexport async function logout({ method, redirect } = {}) {\n  if (method === \"saml\") {\n    return completeSamlLogout();\n  }\n  if (!store.tokens.accessToken) {\n    return removeAllCookies();\n  }\n\n  try {\n    const { data } = await get(`/auth/logout`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    removeAllCookies();\n    defaultHandleRedirect(redirect, data);\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\nasync function completeSamlLogout() {\n  if (!store.tokens.accessToken) {\n    throw new Error(\"Please log in to authorize your logout request.\");\n  }\n\n  try {\n    const { data } = await get(`/auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/logout?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable exchange method once new endpoints are stable [06/15/21]\n// --------------------------\n// const iframe = getIframe();\n// if (!iframe) return;\n// try {\n//   const { data } = await postMessageAsPromise({\n//     type: \"logout\",\n//     tenantId: store.tenantId,\n//   });\n//   removeAllCookies();\n//   setTokensFromCookies();\n//   defaultHandleRedirect(redirect, data);\n// } catch (error) {\n//   removeAllCookies();\n//   redirectToPath(\"/\");\n// }\n","export const apiUrl = `https://api.userfront.com/v0/`;\n\nexport const privateIPRegex =\n  /((^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.))\\d{1,3}\\.\\d{1,3}/g;\n","import { get } from \"./api.js\";\nimport { privateIPRegex } from \"./constants.js\";\nimport { store } from \"./store.js\";\nimport { setFirstFactors } from \"./mfa.js\";\n\n/**\n * Global mode object\n */\nexport const mode = {\n  value: \"live\",\n  reason: undefined,\n  setMode,\n};\n\nsetModeSync();\n\n/**\n * Determine whether a hostname is in test mode.\n * @param {String} hn\n */\nexport function isTestHostname(hn) {\n  try {\n    const hostname = hn || window.location.hostname;\n    return !!(hostname.match(/localhost/g) || hostname.match(privateIPRegex));\n  } catch (err) {\n    return true;\n  }\n}\n\nexport function isHttps() {\n  try {\n    return window.location.protocol === \"https:\";\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Define the mode of operation (live or test)\n * and the tenant's authentication factors\n */\nexport async function setMode() {\n  try {\n    const { data } = await get(`/tenants/${store.tenantId}/mode`);\n    mode.value = data.mode || \"test\";\n    mode.reason = getReason(mode.value);\n    store.mode = mode.value;\n    setFirstFactors(data.authentication);\n    return data;\n  } catch (err) {\n    mode.value = \"test\";\n    store.mode = mode.value;\n  }\n}\n\n/**\n * Estimate the mode without making an API call\n */\nexport function setModeSync() {\n  const modeValue = isTestHostname() || !isHttps() ? \"test\" : \"live\";\n  mode.value = modeValue;\n  mode.reason = getReason(modeValue);\n  store.mode = modeValue;\n}\n\n/**\n * Set the reason for the mode\n * - http\n * - domain\n */\nfunction getReason(mode) {\n  try {\n    if (mode === \"live\") {\n      return \"domain\";\n    }\n    if (window.location.protocol === \"http:\") {\n      return \"http\";\n    } else if (window.location.protocol !== \"https:\") {\n      return \"protocol\";\n    } else {\n      return \"domain\";\n    }\n  } catch (error) {}\n}\n","/**\n * user methods are refactored into a separate file to avoid a circular dependency\n * between Userfront.refresh() [which requires setUser()]\n * and Userfront.user.update() [which requires refresh()].\n */\nimport { put } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { refresh } from \"./refresh.js\";\nimport { getTotp } from \"./totp.js\";\nimport { getJwtPayload } from \"./utils.js\";\nimport { updatePassword } from \"./password.js\";\n\n/**\n * Update the user record on Userfront\n * @param {Object} payload User properties to update e.g. { name: 'John Doe' }\n */\nexport async function update(payload) {\n  if (!payload || Object.keys(payload).length < 1) {\n    return console.warn(\"Missing user properties to update\");\n  }\n\n  // Make request to update the user\n  await put(`/self`, payload, {\n    headers: {\n      authorization: `Bearer ${store.tokens.accessToken}`,\n    },\n  });\n\n  // Refresh the access and ID tokens, and set the store.user object from the ID token\n  await refresh();\n\n  return store.user;\n}\n\n/**\n * Determine whether the access token has a given role\n * @param {String} roleName\n * @param {Object} options\n * @returns {Boolean}\n */\nexport function hasRole(roleName, { tenantId } = {}) {\n  try {\n    if (!store.tokens.accessToken || !store.tenantId) {\n      return false;\n    }\n    const { authorization } = getJwtPayload(store.tokens.accessToken);\n    if (!authorization) {\n      return false;\n    }\n    tenantId = tenantId || store.tenantId;\n    if (!authorization[tenantId] || !authorization[tenantId].roles) {\n      return false;\n    }\n    return authorization[tenantId].roles.indexOf(roleName) > -1;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Add the methods to the store.user object\n */\nstore.user.update = update;\nstore.user.hasRole = hasRole;\nstore.user.updatePassword = updatePassword;\nstore.user.getTotp = getTotp;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\nimport {\n  tokens,\n  accessToken,\n  idToken,\n  setTokensFromCookies,\n  setTokenNames,\n} from \"./tokens\";\nimport { getSession } from \"./session\";\nimport { redirectIfLoggedIn, redirectIfLoggedOut } from \"./url.js\";\nimport { signup } from \"./signup.js\";\nimport { login } from \"./login.js\";\nimport { updatePassword, resetPassword, sendResetLink } from \"./password.js\";\nimport { sendLoginLink } from \"./link.js\";\nimport { sendVerificationCode } from \"./verificationCode\";\nimport { logout } from \"./logout.js\";\nimport { mode, setMode, setModeSync } from \"./mode.js\";\n// import { setIframe } from \"./iframe.js\";\nimport { user } from \"./user.js\";\nimport \"./user.methods.js\";\nimport { refresh } from \"./refresh.js\";\nimport { apiUrl } from \"./constants.js\";\nimport { resetMfa } from \"./mfa.js\";\n\nlet initCallbacks = [];\n\n/**\n * Initialize the Userfront library.\n * @param {String} tenantId\n */\nfunction init(tenantId, opts = {}) {\n  if (!tenantId) return console.warn(\"Userfront initialized without tenantId\");\n\n  store.tenantId = tenantId;\n\n  store.baseUrl = opts.baseUrl || apiUrl;\n  if (!store.baseUrl.endsWith(\"/\")) {\n    store.baseUrl += \"/\";\n  }\n\n  if (opts.domain) {\n    store.domain = opts.domain;\n    const url = `https://${store.domain}`;\n    axios.defaults.headers.common[\"x-application-id\"] = url;\n    axios.defaults.headers.common[\"x-origin\"] = url;\n  }\n\n  setTokenNames();\n  // setIframe(); // TODO re-enable when iframe is needed\n  setTokensFromCookies();\n\n  // Estimate the mode synchronously with local data.\n  // Clients that require the true mode or the default\n  // authenticationData should call and await setMode.\n  setModeSync();\n\n  resetMfa();\n\n  try {\n    if (initCallbacks.length > 0) {\n      initCallbacks.forEach((cb) => {\n        if (!cb || typeof cb !== \"function\") return;\n        cb({ tenantId });\n      });\n    }\n    initCallbacks = [];\n  } catch (error) {}\n}\n\n/**\n * Add a callback function to be called upon Userfront.init()\n * @param {Function} cb\n */\nfunction addInitCallback(cb) {\n  if (!cb || typeof cb !== \"function\") return;\n  initCallbacks.push(cb);\n}\n\n/**\n\n * Register a window-level event called \"urlchanged\" that will fire\n * whenever the browser URL changes.\n */\nlet isRegistered = false;\nfunction registerUrlChangedEventListener() {\n  if (isRegistered) return;\n  isRegistered = true;\n  try {\n    history.pushState = ((f) =>\n      function pushState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"pushstate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.pushState);\n\n    history.replaceState = ((f) =>\n      function replaceState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"replacestate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.replaceState);\n\n    window.addEventListener(\"popstate\", () => {\n      window.dispatchEvent(new Event(\"urlchanged\"));\n    });\n  } catch (error) {}\n}\n\n/**\n * EXPORTS\n */\n\nexport default {\n  // index\n  addInitCallback,\n  init,\n  registerUrlChangedEventListener,\n\n  //logout\n  logout,\n\n  // mode\n  mode,\n  setMode,\n\n  // refresh\n  refresh: (a, b, c) => {\n    try {\n      console.warn(\n        \"Userfront.refresh() is deprecated and will be removed. Please use Userfront.tokens.refresh() instead.\"\n      );\n    } catch (error) {}\n    return refresh(a, b, c);\n  },\n\n  // signon\n  login,\n  resetPassword,\n  updatePassword,\n  sendLoginLink,\n  sendResetLink,\n  sendVerificationCode,\n  signup,\n\n  // store\n  store,\n\n  // tokens\n  tokens,\n  accessToken,\n  idToken,\n\n  // session\n  getSession,\n\n  // url\n  redirectIfLoggedIn,\n  redirectIfLoggedOut,\n\n  // user\n  user,\n\n  // utils\n};\n","import { loginWithPassword } from \"./password.js\";\nimport { loginWithPasswordMigrate } from \"./password.migrate.js\";\nimport { loginWithLink, sendPasswordlessLink } from \"./link.js\";\nimport { signonWithSso } from \"./sso.js\";\nimport { loginWithTotp } from \"./totp.js\";\nimport { loginWithVerificationCode } from \"./verificationCode.js\";\nimport { completeSamlLogin } from \"./saml.js\";\nimport { setupPkce } from \"./pkce.js\";\n\n/**\n * Log a user in via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @property {String} method\n * @property {Number} userId\n * @property {String} userUuid\n * @property {String} email\n * @property {String} username\n * @property {String} emailOrUsername\n * @property {String} phoneNumber\n * @property {String} password\n * @property {String} token\n * @property {String} uuid\n * @property {String} totpCode\n * @property {String} backupCode\n * @property {String} channel \"sms\" or \"email\"\n * @property {String} verificationCode\n * @property {String | Boolean} redirect - do not redirect if false, or redirect to given path\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n */\nexport async function login({\n  method,\n  // User identifiers\n  userId,\n  userUuid,\n  email,\n  username,\n  emailOrUsername,\n  phoneNumber,\n  // Password\n  password,\n  // Link\n  token,\n  uuid,\n  // Totp\n  totpCode,\n  backupCode,\n  // Verification code\n  channel,\n  verificationCode,\n  // Other\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n  options,\n} = {}) {\n  if (!method) {\n    throw new Error('Userfront.login called without \"method\" property.');\n  }\n  setupPkce();\n  switch (method) {\n    case \"apple\":\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n    case \"okta\":\n      return signonWithSso({ provider: method, redirect });\n    case \"password\":\n      return loginWithPassword({\n        email,\n        username,\n        emailOrUsername,\n        password,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n        options,\n      });\n    case \"password-migrate\":\n      return loginWithPasswordMigrate({\n        email,\n        username,\n        emailOrUsername,\n        password,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n        options,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email });\n    case \"link\":\n      return loginWithLink({\n        token,\n        uuid,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n      });\n    case \"totp\":\n      return loginWithTotp({\n        totpCode,\n        backupCode,\n        userId,\n        userUuid,\n        emailOrUsername,\n        email,\n        username,\n        phoneNumber,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n      });\n    case \"verificationCode\":\n      return loginWithVerificationCode({\n        channel,\n        email,\n        phoneNumber,\n        verificationCode,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n      });\n    case \"saml\":\n      return completeSamlLogin();\n    default:\n      throw new Error('Userfront.login called with invalid \"method\" property.');\n  }\n}\n","import { post } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { handleLoginResponse } from \"./authentication.js\";\nimport { getMfaHeaders } from \"./mfa.js\";\nimport { getPkceRequestQueryParams } from \"./pkce.js\";\n\n/**\n * Log a user in with email/username and password using the password/migrate endpoint.\n * Redirect the browser after successful login based on the redirectTo value returned.\n * @property {String} email The user's email. One of email/username/emailOrUsername should be present.\n * @property {String} username The user's username. One of email/username/emailOrUsername should be present.\n * @property {String} emailOrUsername Either the user's email or username. One of email/username/emailOrUsername should be present.\n * @property {String} password\n * @property {String|Boolean} redirect\n *  URL to redirect to after login, or false to suppress redirect. Otherwise, redirects to the after-login path set on the server.\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n * @property {Object} options\n * @property {Boolean} options.noResetEmail\n *  By default, Userfront sends a password reset email if a user without a password tries to log in with a password.\n *  Set options.noResetEmail = true to override this behavior and return an error instead.\n *\n */\nexport async function loginWithPasswordMigrate({\n  email,\n  username,\n  emailOrUsername,\n  password,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n  options,\n}) {\n  try {\n    const body = {\n      tenantId: store.tenantId,\n      emailOrUsername: email || username || emailOrUsername,\n      password,\n    };\n    if (options && options.noResetEmail) {\n      body.options = {\n        noResetEmail: true,\n      };\n    }\n\n    // Make the request to password/migrate\n    const { data } = await post(`/auth/password/migrate`, body, {\n      headers: getMfaHeaders(),\n      params: getPkceRequestQueryParams(),\n    });\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\nexport async function completeSamlLogin() {\n  try {\n    if (!store.tokens.accessToken) {\n      return console.warn(\"Cannot complete SAML login without access token\");\n    }\n\n    const { data } = await get(`/auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/login?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { signupWithPassword } from \"./password.js\";\nimport { signonWithSso } from \"./sso.js\";\nimport { sendPasswordlessLink } from \"./link.js\";\nimport { sendVerificationCode } from \"./verificationCode.js\";\nimport { setupPkce } from \"./pkce.js\";\n\n/**\n * Register a user via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @property {String} method\n * @property {String} email\n * @property {String} username\n * @property {String} phoneNumber\n * @property {String} name\n * @property {Object} data - Object for custom user fields\n * @property {String} password\n * @property {String} channel \"sms\" or \"email\"\n * @property {String} redirect - do not redirect if false, or redirect to given path\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n */\nexport async function signup({\n  method,\n  email,\n  username,\n  phoneNumber,\n  name,\n  data,\n  password,\n  channel,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n} = {}) {\n  setupPkce();\n  if (!method) {\n    throw new Error('Userfront.signup called without \"method\" property.');\n  }\n  switch (method) {\n    case \"apple\":\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n    case \"okta\":\n      return signonWithSso({ provider: method, redirect });\n    case \"password\":\n      return signupWithPassword({\n        username,\n        name,\n        email,\n        password,\n        userData: data,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email, name, username, userData: data });\n    case \"verificationCode\":\n      return sendVerificationCode({\n        channel,\n        email,\n        phoneNumber,\n        name,\n        username,\n        data,\n      });\n    default:\n      throw new Error(\n        'Userfront.signup called with invalid \"method\" property.'\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}