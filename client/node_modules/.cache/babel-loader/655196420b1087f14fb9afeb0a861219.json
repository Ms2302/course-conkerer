{"ast":null,"code":"import e, { memo as r } from \"react\";\nimport t from \"@anymod/core\";\nimport n from \"@userfront/core\";\nconst o = function () {\n    try {\n      return s.isScript1Loading ? Promise.resolve() : Promise.resolve(l()).then(function (e) {\n        return Promise.resolve(m(e)).then(function (e) {\n          return Promise.resolve(a(e)).then(function () {\n            u(), p();\n          });\n        });\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  {\n    Singleton: s,\n    alias: c,\n    render: i,\n    processPage: a,\n    addScript1ToDocument: d,\n    createOrReturnPage: l,\n    checkPageAndUpdate: m,\n    executeCallbacks: u,\n    logErrorsAndTips: p\n  } = t,\n  {\n    registerUrlChangedEventListener: f,\n    addInitCallback: g\n  } = n;\nc.setAlias(\"Userfront\"), s.Opts.api = !0, g(({\n  tenantId: e\n}) => {\n  s.External.project = e, d(\"https://cdn.userfront.com/toolkit/page/\", e, o);\n}), f(), \"object\" == typeof window && window.addEventListener(\"urlchanged\", i);\nconst P = {\n  build({\n    toolId: t\n  }) {\n    class n extends e.Component {\n      componentDidMount() {\n        !function () {\n          try {\n            try {\n              o();\n            } catch (e) {\n              console.warn(e && e.message ? e.message : \"Problem loading page\", e);\n            }\n            Promise.resolve();\n          } catch (e) {\n            return Promise.reject(e);\n          }\n        }();\n      }\n      render() {\n        return e.createElement(\"div\", null, e.createElement(\"div\", {\n          id: \"userfront-\" + t\n        }));\n      }\n    }\n    return r(n);\n  }\n};\nfor (const e in n) P[e] || (P[e] = n[e]);\nexport default P;","map":null,"metadata":{},"sourceType":"module"}